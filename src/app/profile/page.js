import { auth } from '@clerk/nextjs/server';
import { db } from "@/utils/utilities.js";
import UserForm from '@/components/UserForm';  // Importing the UserForm component
import Link from "next/link";
import Image from "next/image";
import { revalidatePath } from "next/cache";
import DeleteButton from "@/components/DeleteButton";  // Importing the Delete Button (Client Component)

export default async function Page() {
    const { userId, redirectToSignIn } = await auth();
    
    // If there's no userId, redirect to sign-in page
    if (!userId) return redirectToSignIn();

    // Check if user exists in the database
    const userInfo = await db.query(`SELECT * FROM users WHERE clerk_id = $1`, [userId]);
    if (userInfo.rowCount === 0) {
        // If user doesn't exist, render the UserForm component for registration or updating the profile
        return (
            <div className="max-w-5xl mx-auto p-4">
                <UserForm />  {/* Display the user form */}
            </div>
        );
    }

    const user = userInfo.rows[0];

    // Fetch the user's games
    const userGames = await db.query(`
        SELECT id, name, creator, released_year, description, img_url
        FROM games
        WHERE user_id = $1
        ORDER BY id DESC
    `, [user.id]);

    // Server-side delete function
    async function deleteGame(id) {
        'use server';  // This marks the function as server-side

        // Perform the deletion
        await db.query(`DELETE FROM games WHERE id = $1`, [id]);

        // Revalidate the path to refresh the profile page
        revalidatePath("/profile");
    }

    return (
        <div className="max-w-5xl mx-auto p-4">
            <h1 className="text-3xl font-bold mb-6">{user.username}'s Page</h1>
            <p className="text-lg mb-4">{user.bio || "No bio available"}</p>

            <h2 className="text-2xl font-semibold mb-4">My Posts:</h2>
            {userGames.rowCount === 0 ? (
                <p>No games posted yet.</p>
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {userGames.rows.map((game) => (
                        <div key={game.id} className="bg-white p-4 rounded-lg shadow-lg border border-gray-300">
                            <h3 className="text-xl font-semibold mb-2">{game.name}</h3>
                            <Link href={`/games/${game.id}`}>
                                <Image
                                    src={game.img_url}
                                    alt={game.name}
                                    width={350}
                                    height={500}
                                    className="rounded-lg mb-4"
                                />
                            </Link>
                            <p className="text-md font-medium text-gray-700"><strong>Created by:</strong> {game.creator}</p>
                            <p className="text-md font-medium text-gray-700"><strong>Release Year:</strong> {game.released_year}</p>
                            <p className="text-sm text-gray-600 mt-2"><strong>Description:</strong> {game.description}</p>

                            {/* Pass the delete function to the Client Component */}
                            <DeleteButton gameId={game.id} deleteGame={deleteGame} />
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}

















//auth() returns an object with information about the authenticated user (like their userId, etc.). This object is stored in the authInfo variable.
//authInfo example:
//    {
//     userId: "user_1234",, uniquely generated by clerk. Gonna be used in dstabse.
//     email: "user@example.com",
//     firstName: "John",
//     lastName: "Doe",
//    }